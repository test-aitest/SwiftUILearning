name: Add Label When Pull Request
on:
  pull_request:
    types: [ opened, synchronize, reopened, labeled, unlabeled ]
jobs:
  add_labels:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/github-script@v4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ret = await github.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const definitions = ret.data
              .filter(value => value.name
              .includes(': '))
              .map(value => value.name.split(':')[1].toLowerCase().trim());

            const commits = await github.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            const chunk = Array.from(new Set(commits.data
              .map(data => data.commit.message)
              .filter(msg => msg.includes(': '))
              .map(msg => msg.startsWith('chore: release') ? msg : msg.split(': ')[0])));

            const prefixes = chunk.map(value => {
              if (value === 'fix') { return 'bugfix'; }
              if (value.startsWith('chore(deps')) { return 'dependency'; }
              if (value.startsWith('chore: release')) { return 'release'; }
              return value;
            }).filter(value => 4 <= value.length);

            const labels = definitions
              .filter(definition => prefixes.filter(prefix => definition.startsWith(prefix)).length !== 0)
              .map(value => `type: ${value}`);

            if (labels && labels.length !== 0) {
              github.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels
              });
            }
  check_labels:
    needs: [ add_labels ]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/github-script@v4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { changelog } = require('./package.json');

            const ret = await github.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number
            });
            const labels = new Set(ret.data.map(label => label.name));

            const definitions = new Set(Object.keys(changelog.labels));
            if (ret.data.length === 0 || new Set([...labels].filter(label => (definitions.has(label)))).size === 0) {
              let body = '### Labels for Release Note\n'
              body += '**[ERROR]**  \n';
              body += '- リリースノートの自動生成のためにラベルを付けてください。\n\n';
              body += 'The available labels are as follows:\n'
              body += '| Label | Release Note |   | Label | Release Note |\n'
              body += '|:------|:-------------|:-:|:------|:-------------|\n'

              const entries = Object.entries(changelog.labels)
              for (let i = 0; i < entries.length; i++) {
                body += `| ${entries[i][0]} | ${entries[i][1]} |`;
                body += entries[++i] ? `| ${entries[i][0]} | ${entries[i][1]} |\n` : '|||\n';
              }

              github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
              return core.setFailed('No label has been set.');
            }
